"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertPHAEToHelis = exports.convertHelisToPHAE = void 0;
const phaeton_validator_1 = require("@phaeton/phaeton-validator");
const FIXED_POINT = 10 ** 8;
const PHAETON_MAX_DECIMAL_POINTS = 8;
const getDecimalPlaces = (amount) => (amount.split('.')[1] || '').length;
const convertHelisToPHAE = (helisAmount) => {
    if (typeof helisAmount !== 'string') {
        throw new Error('Cannot convert non-string amount');
    }
    if (getDecimalPlaces(helisAmount)) {
        throw new Error('Helis amount should not have decimal points');
    }
    const helisAmountBigInt = BigInt(helisAmount);
    if (helisAmountBigInt > phaeton_validator_1.MAX_UINT64) {
        throw new Error('Helis amount out of range');
    }
    const int = (helisAmountBigInt / BigInt(FIXED_POINT)).toString();
    const floating = Number(helisAmountBigInt % BigInt(FIXED_POINT)) / FIXED_POINT;
    const floatingPointsSplit = floating
        .toLocaleString('en-US', {
        maximumFractionDigits: PHAETON_MAX_DECIMAL_POINTS,
    })
        .split('.')[1];
    const res = floating !== 0 ? `${int}.${floatingPointsSplit}` : int;
    return res;
};
exports.convertHelisToPHAE = convertHelisToPHAE;
const convertPHAEToHelis = (phaeAmount) => {
    var _a;
    if (typeof phaeAmount !== 'string') {
        throw new Error('Cannot convert non-string amount');
    }
    if (getDecimalPlaces(phaeAmount) > PHAETON_MAX_DECIMAL_POINTS) {
        throw new Error('PHAE amount has too many decimal points');
    }
    const splitAmount = phaeAmount.split('.');
    const phaetonAmountInt = BigInt(splitAmount[0]);
    const phaetonAmountFloatBigInt = BigInt(((_a = splitAmount[1]) !== null && _a !== void 0 ? _a : '0').padEnd(PHAETON_MAX_DECIMAL_POINTS, '0'));
    const helisAmountBigInt = phaetonAmountInt * BigInt(FIXED_POINT) + phaetonAmountFloatBigInt;
    if (helisAmountBigInt > phaeton_validator_1.MAX_UINT64) {
        throw new Error('PHAE amount out of range');
    }
    return helisAmountBigInt.toString();
};
exports.convertPHAEToHelis = convertPHAEToHelis;
//# sourceMappingURL=format.js.map